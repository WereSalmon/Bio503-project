library(vegan)
library(plyr)
library(qualpalr)
library(ggpubr)
library(dplyr)
library(data.table)
library(biomformat)
library(readr)
lemay2018 <- readRDS("lemay2018_unfiltered_phyloseq.RDS")
newMeta = separate(as.data.frame(as.matrix(lemay2018@sam_data)),
col="sample_id",
into=c("kelp_location", "number"),
sep="-")
newMeta$location = str_sub(newMeta$kelp_location, -2,-1)
newMeta$kelp= str_sub(newMeta$kelp_location, 1,-3)
lemay2018 = phyloseq(sample_data(newMeta),
otu_table(lemay2018@otu_table, taxa_are_rows = FALSE),
tax_table(lemay2018@tax_table))
king2022 <- readRDS("king2022_unfiltered_phyloseq-2.RDS")
View(king2022@sam_data)
## merge with lemay data
kelp_me = merge_phyloseq(lemay2018, king2022)
kelp_me <- subset_taxa(kelp_me,
domain != "Unassigned" &
domain != "Eukaryota" &
order != "Chloroplast"&
order != "Mitochondria")
#Add unifiltered sample read numbers in
kelp_me@sam_data$sample_sums_unfiltered <- as.numeric(sample_sums(kelp_me))
#sort(as.numeric(sample_sums(kelp_me))) : Most samples > 1000,
kelp_me_high <- prune_samples(sample_sums(kelp_me) >= 1000, kelp_me)
#extracting OTUs and filtering low frequency ASV's
otutab <- as.data.frame((t(as.matrix(otu_table(kelp_me_high@otu_table)))))
otutab$asv_abundance <- rowSums(otutab)
#removing ASV's that occur fewer than 100 times in the dataset
otu.pruned <- subset(otutab, otutab$asv_abundance>100)
widthotu = ncol(otu.pruned)
otu.pruned <- otu.pruned[,-c(widthotu)]
#removing low freq samples
ASVoccur = function(x){return(sum(x>0))}
otu.pruned$asv_occur_count = apply(otu.pruned,1, ASVoccur)
otu.highfreq = subset(otu.pruned, otu.pruned$asv_occur_count > 2)
otu.highfreq = otu.highfreq[,-c(widthotu)]
## remove reads that are the result of sequencing errors
otu.clean <- mutate_all(otu.highfreq, funs(ifelse(. <5, 0, .)))
kelp_me_clean = phyloseq(sample_data(kelp_me_high),
tax_table(kelp_me_high),
otu_table(as.matrix(otu.clean), taxa_are_rows = TRUE))
kelp_me_clean@sam_data$sample_sums_filtered <- sample_sums(kelp_me_clean)
write_rds(kelp_me_clean, "kelp_me_clean.RDS")
## start by loading necessary packages
library(phyloseq)
library(tidyverse)
library(vegan)
library(plyr)
library(qualpalr)
library(ggpubr)
library(dplyr)
library(data.table)
library(biomformat)
library(readr)
lemay2018 <- readRDS("lemay2018_unfiltered_phyloseq.RDS")
newMeta = separate(as.data.frame(as.matrix(lemay2018@sam_data)),
col="sample_id",
into=c("kelp_location", "number"),
sep="-")
newMeta$location = str_sub(newMeta$kelp_location, -2,-1)
newMeta$kelp= str_sub(newMeta$kelp_location, 1,-3)
lemay2018 = phyloseq(sample_data(newMeta),
otu_table(lemay2018@otu_table, taxa_are_rows = FALSE),
tax_table(lemay2018@tax_table))
## add a field to further specificy where the data was collected
lemay2018$region = "UK"
## add a field to further specificy where the data was collected
lemay2018@sam_data$region = "UK"
## import king data
king2022 <- readRDS("king2022_unfiltered_phyloseq-2.RDS")
## add a variable to further specify where the data was collected
king2022@sam_data$region = "BC"
## merge with lemay data
kelp_me = merge_phyloseq(lemay2018, king2022)
kelp_me <- subset_taxa(kelp_me,
domain != "Unassigned" &
domain != "Eukaryota" &
order != "Chloroplast"&
order != "Mitochondria")
#Add unifiltered sample read numbers in
kelp_me@sam_data$sample_sums_unfiltered <- as.numeric(sample_sums(kelp_me))
#sort(as.numeric(sample_sums(kelp_me))) : Most samples > 1000,
kelp_me_high <- prune_samples(sample_sums(kelp_me) >= 1000, kelp_me)
#extracting OTUs and filtering low frequency ASV's
otutab <- as.data.frame((t(as.matrix(otu_table(kelp_me_high@otu_table)))))
otutab$asv_abundance <- rowSums(otutab)
#removing ASV's that occur fewer than 100 times in the dataset
otu.pruned <- subset(otutab, otutab$asv_abundance>100)
widthotu = ncol(otu.pruned)
otu.pruned <- otu.pruned[,-c(widthotu)]
#removing low freq samples
ASVoccur = function(x){return(sum(x>0))}
otu.pruned$asv_occur_count = apply(otu.pruned,1, ASVoccur)
otu.highfreq = subset(otu.pruned, otu.pruned$asv_occur_count > 2)
otu.highfreq = otu.highfreq[,-c(widthotu)]
## remove reads that are the result of sequencing errors
otu.clean <- mutate_all(otu.highfreq, funs(ifelse(. <5, 0, .)))
kelp_me_clean = phyloseq(sample_data(kelp_me_high),
tax_table(kelp_me_high),
otu_table(as.matrix(otu.clean), taxa_are_rows = TRUE))
kelp_me_clean@sam_data$sample_sums_filtered <- sample_sums(kelp_me_clean)
write_rds(kelp_me_clean, "kelp_me_clean.RDS")
lemay2018 <- readRDS("lemay2018_unfiltered_phyloseq.RDS")
newMeta = separate(as.data.frame(as.matrix(lemay2018@sam_data)),
col="sample_id",
into=c("kelp_location", "number"),
sep="-")
newMeta$location = str_sub(newMeta$kelp_location, -2,-1)
newMeta$kelp= str_sub(newMeta$kelp_location, 1,-3)
lemay2018 = phyloseq(sample_data(newMeta),
otu_table(lemay2018@otu_table, taxa_are_rows = FALSE),
tax_table(lemay2018@tax_table))
## add a field to further specificy where the data was collected
lemay2018@sam_data$region = "UK"
## import king data
king2022 <- readRDS("king2022_unfiltered_phyloseq-2.RDS")
## add a variable to further specify where the data was collected
king2022@sam_data$region = "BC"
## merge with lemay data
kelp_me = merge_phyloseq(lemay2018, king2022)
kelp_me <- subset_taxa(kelp_me,
domain != "Unassigned" &
domain != "Eukaryota" &
order != "Chloroplast"&
order != "Mitochondria")
#Add unifiltered sample read numbers in
kelp_me@sam_data$sample_sums_unfiltered <- as.numeric(sample_sums(kelp_me))
#sort(as.numeric(sample_sums(kelp_me))) : Most samples > 1000,
kelp_me_high <- prune_samples(sample_sums(kelp_me) >= 1000, kelp_me)
#extracting OTUs and filtering low frequency ASV's
otutab <- as.data.frame((t(as.matrix(otu_table(kelp_me_high@otu_table)))))
otutab$asv_abundance <- rowSums(otutab)
#removing ASV's that occur fewer than 100 times in the dataset
otu.pruned <- subset(otutab, otutab$asv_abundance>100)
widthotu = ncol(otu.pruned)
otu.pruned <- otu.pruned[,-c(widthotu)]
#removing low freq samples
ASVoccur = function(x){return(sum(x>0))}
otu.pruned$asv_occur_count = apply(otu.pruned,1, ASVoccur)
otu.highfreq = subset(otu.pruned, otu.pruned$asv_occur_count > 2)
otu.highfreq = otu.highfreq[,-c(widthotu)]
## remove reads that are the result of sequencing errors
otu.clean <- mutate_all(otu.highfreq, funs(ifelse(. <5, 0, .)))
kelp_me_clean = phyloseq(sample_data(kelp_me_high),
tax_table(kelp_me_high),
otu_table(as.matrix(otu.clean), taxa_are_rows = TRUE))
kelp_me_clean@sam_data$sample_sums_filtered <- sample_sums(kelp_me_clean)
write_rds(kelp_me_clean, "kelp_me_clean.RDS")
tax.data = as.data.frame(kelp_me_clean@tax_table)
tax.data = rownames_to_column(as.data.frame(tax.data))
otu.clean = as.data.frame(kelp_me_clean@otu_table)
names(tax.data)[1] = "OTUID"
otu_biom = make_biom(as.data.frame(otu.clean))
write_biom(otu_biom, "kelpme_otu.biom")
write.table(tax.data,"kelpme_otu_metadata.txt", quote = FALSE, sep ="\t")
## import functional annotation of lemay dataset
file_name = "kelpme_func.txt"
func_table = read.table(file_name, sep = "\t", row.names = 1)
## import sample names and append them to the table of functional annotations
func_header = scan(file_name, nlines = 2, what = character())[-c(1:7)]
names(func_table) = func_header
View(func_table)
func_table = as.data.frame(t(func_table))
func_table$annotated_asvs = kelp_me_clean@sam_data$sample_sums_filtered - func_table$unannotated_asvs
View(func_table)
func_table = rbind(kelp_me_meta, func_table)
## Combine the metadata from the original phyloseq file with the new functional annotation data
kelp_me_meta = as.data.frame(kelp_me_clean@sam_data)
func_table = rbind(kelp_me_meta, func_table)
? rbind
func_table = rbind(kelp_me_meta, func_table)
? cbind
func_table = cbind(kelp_me_meta, func_table)
View(func_table)
func_table$kelp
func_table$Species
laminaria = subset(func_table, kelp == "Laminaria" | Species == "Laminaria hyperborea")
func_table = subset(func_table, kelp == "Laminaria" | Species == "Laminaria hyperborea" | kelp == "Saccharina"| Species == "Saccharina latissima")
View(func_table)
## separate our metadata into a separate table
func_table_metadata.clean = select(func_table.clean, select = c(kelp, region, site, sample_sums_filtered, annotated_reads))
## separate our metadata into a separate table
func_table_metadata.clean = select(func_table.clean, select = c(kelp, region, site, sample_sums_filtered, annotated_asvs))
## separate our metadata into a separate table
func_table_metadata = select(func_table, select = c(kelp, region, site, sample_sums_filtered, annotated_asvs))
? mutate
mutate(func_table, funs(ifelse(Species == "Laminaria hyperborea", kelp = "Laminaria")))
? ifelse
mutate(func_table, funs(ifelse(Species == "Laminaria hyperborea", "Laminaria")))
mutate(func_table, funs(fifelse(Species == "Laminaria hyperborea", "Laminaria")))
func_table %>%
mutate(funs(ifelse(kelp == "Laminaria" | Species == "Laminaria hyperborea", "Laminaria", "Saccharina")))
func_table %>%
mutate(ifelse(kelp == "Laminaria" | Species == "Laminaria hyperborea", "Laminaria", "Saccharina"))
func_table %>%
mutate(kelp_species = ifelse(kelp == "Laminaria" | Species == "Laminaria hyperborea", "Laminaria", "Saccharina"))
func_table = func_table %>%
mutate(kelp_species = ifelse(kelp == "Laminaria" | Species == "Laminaria hyperborea", "Laminaria", "Saccharina"))
func_table$kelp_species
func_table = func_table %>%
mutate(kelp_species = fifelse(kelp == "Laminaria" | Species == "Laminaria hyperborea", "Laminaria", "Saccharina"))
func_table$kelp_species
func_table = func_table %>%
mutate(kelp_species = ifelse(kelp == "Laminaria" | Species == "Laminaria hyperborea", "Laminaria", "Saccharina"))
func_table$kelp_species
func_table = func_table %>%
mutate(kelp_species = ifelse(kelp == "Laminaria" | Species == "Laminaria hyperborea", "Laminaria", kelp))
## separate our metadata into a separate table
func_table_metadata = select(func_table, select = c(kelp, region, site, sample_sums_filtered, annotated_asvs))
func_table$kelp_species
func_table = func_table %>%
mutate(kelp_species = ifelse(kelp == "Saccharina" | Species == "Saccharina latissima", "Saccharina"))
func_table$kelp_species
func_table = func_table %>%
mutate(kelp_species = ifelse(kelp == "Saccharina" | Species == "Saccharina latissima", "Saccharina", "Laminaria"))
func_table$kelp_species
## import functional annotation of lemay dataset
file_name = "kelpme_func.txt"
func_table = read.table(file_name, sep = "\t", row.names = 1)
## import sample names and append them to the table of functional annotations
func_header = scan(file_name, nlines = 2, what = character())[-c(1:7)]
names(func_table) = func_header
func_table = as.data.frame(t(func_table))
metacols = ncols(func_table)
metacols = ncol(func_table)
## use our counts of unannotated asv reads to find the number of annotated asv reads
func_table$annotated_asvs = kelp_me_clean@sam_data$sample_sums_filtered - func_table$unannotated_asvs
## Combine the metadata from the original phyloseq file with the new functional annotation data
kelp_me_meta = as.data.frame(kelp_me_clean@sam_data)
func_table = cbind(kelp_me_meta, func_table)
func_table = subset(func_table, kelp == "Laminaria" | Species == "Laminaria hyperborea" | kelp == "Saccharina"| Species == "Saccharina latissima")
source("~/.active-rstudio-document", echo=TRUE)
unite(func_table, site, c(Site_name, location))
func_table = unite(func_table, site, c(Site_name, location))
func_table$site
## before lengthening the table copy the number of annotated asvs to another column
func_table.clean$annotated_asvs2 = func_table.clean$annotated_asvs
## before lengthening the table copy the number of annotated asvs to another column
func_table$annotated_asvs2 = func_table$annotated_asvs
## pivot longer to assign the occurence of each function to the sample it was measured in
func_table.clean = func_table.clean %>% pivot_longer(cols = c(1:metacols+1), names_to = "eco_function", values_to="function_abundance")
## pivot longer to assign the occurence of each function to the sample it was measured in
func_table.long = func_table %>% pivot_longer(cols = c(1:metacols+1), names_to = "eco_function", values_to="function_abundance")
## pivot longer to assign the occurence of each function to the sample it was measured in
func_table.long = func_table %>% pivot_longer(cols = -c(1:26), names_to = "eco_function", values_to="function_abundance")
## import functional annotation of lemay dataset
file_name = "kelpme_func.txt"
func_table = read.table(file_name, sep = "\t", row.names = 1)
## import sample names and append them to the table of functional annotations
func_header = scan(file_name, nlines = 2, what = character())[-c(1:7)]
names(func_table) = func_header
func_table = as.data.frame(t(func_table))
metacols = ncol(func_table)
## use our counts of unannotated asv reads to find the number of annotated asv reads
func_table$annotated_asvs = kelp_me_clean@sam_data$sample_sums_filtered - func_table$unannotated_asvs
## Combine the metadata from the original phyloseq file with the new functional annotation data
kelp_me_meta = as.data.frame(kelp_me_clean@sam_data)
func_table = cbind(kelp_me_meta, func_table)
func_table = subset(func_table, kelp == "Laminaria" | Species == "Laminaria hyperborea" | kelp == "Saccharina"| Species == "Saccharina latissima")
## combine the site names from the different datasets into a single column
func_table = unite(func_table, site, c(Site_name, location))
## before lengthening the table copy the number of annotated asvs to another column
func_table$annotated_asvs2 = func_table$annotated_asvs
## pivot longer to assign the occurence of each function to the sample it was measured in
func_table.long = func_table %>% pivot_longer(cols = -c(1:26), names_to = "eco_function", values_to="function_abundance")
metacols = ncol(func_table)
## import functional annotation of lemay dataset
file_name = "kelpme_func.txt"
func_table = read.table(file_name, sep = "\t", row.names = 1)
## import sample names and append them to the table of functional annotations
func_header = scan(file_name, nlines = 2, what = character())[-c(1:7)]
names(func_table) = func_header
func_table = as.data.frame(t(func_table))
metacols = ncol(func_table)
## use our counts of unannotated asv reads to find the number of annotated asv reads
func_table$annotated_asvs = kelp_me_clean@sam_data$sample_sums_filtered - func_table$unannotated_asvs
## Combine the metadata from the original phyloseq file with the new functional annotation data
kelp_me_meta = as.data.frame(kelp_me_clean@sam_data)
func_table = cbind(func_table, kelp_me_meta)
func_table = subset(func_table, kelp == "Laminaria" | Species == "Laminaria hyperborea" | kelp == "Saccharina"| Species == "Saccharina latissima")
## combine the site names from the different datasets into a single column
func_table = unite(func_table, site, c(Site_name, location))
## before lengthening the table copy the number of annotated asvs to another column
func_table$annotated_asvs2 = func_table$annotated_asvs
## pivot longer to assign the occurence of each function to the sample it was measured in
func_table.long = func_table %>% pivot_longer(cols = c(1:metacols+1), names_to = "eco_function", values_to="function_abundance")
## calculate the relative abundance of each function in each sample
func_table.clean$relative_abundance = func_table.clean$function_abundance/func_table.clean$sample_sums_filtered
## calculate the relative abundance of each function in each sample
func_table$relative_abundance = func_table$function_abundance/func_table$sample_sums_filtered
View(func_table)
## pivot longer to assign the occurence of each function to the sample it was measured in
func_table.long = func_table %>% pivot_longer(cols = c(1:metacols), names_to = "eco_function", values_to="function_abundance")
## calculate the relative abundance of each function in each sample
func_table$relative_abundance = func_table$function_abundance/func_table$sample_sums_filtered
View(func_table)
## calculate the relative abundance of each function in each sample
func_table.long$relative_abundance = func_table.long$function_abundance/func_table.long$sample_sums_filtered
## next summarise the data by function
func.sum = ddply(func_table.long, c("eco_function"), summarise, sum = sum(relative_abundance))
## sort the data by relative abundance
func.sum= func.sum[order(-func.sum$sum),]
## separate out the top 15 most common functions as well as the number of annotated reads in each sample
## the total number of annotated reads should be the most common "function" in each sample so we take the top 16 most common functions instead of the 15 most common
top.df = func.sum[c(1:16),]
top.df$place = "top_15"
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(region), y = as.numeric(relative_abundance)))+
geom_boxplot(outliers=FALSE)+
ggtitle(paste("Overall frequency of", f, sep = " "))+
labs(y="Frequency", x="Region")
ggsave(paste0(f,"_by_region",  ".png"), plot = funcy_plot, path = "figures/overall")
}
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(site), y = as.numeric(relative_abundance)))+
geom_point()+
facet_grid(.~region, scales="free", space="free")+
ggtitle(paste("Overall frequency of", f, sep = " "))+
labs(y="Frequency", x="Location")
ggsave(paste0(f,"_by_location",  ".png"), plot = funcy_plot, path = "figures/overall/data_by_location")
}
func_table.long$relative_annotated_abundance = func_table.long$function_abundance/func_table.long$annotated_asvs2
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(region), y = as.numeric(relative_annotated_abundance)))+
geom_boxplot(outliers=FALSE)+
ggtitle(paste("Frequency of", f, "amongst annotated taxa", sep = " "))+
labs(y="Frequency", x="Region")
ggsave(paste0(f,"_by_region",  ".png"), plot = funcy_plot, path = "figures/annotated")
}
for (f in top.df$eco_function){
funcdata = subset(func_table.clean, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(site), y = as.numeric(relative_annotated_abundance)))+
geom_point()+
facet_grid(.~region, scales="free", space="free")+
labs(y="Frequency", x="Location")+
ggtitle(paste("Frequency of", f, "amongst annotated taxa", sep = " "))
ggsave(paste0(f,"_by_location",  ".png"), plot = funcy_plot, path = "figures/annotated/data_by_location")
}
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(site), y = as.numeric(relative_annotated_abundance)))+
geom_point()+
facet_grid(.~region, scales="free", space="free")+
labs(y="Frequency", x="Location")+
ggtitle(paste("Frequency of", f, "amongst annotated taxa", sep = " "))
ggsave(paste0(f,"_by_location",  ".png"), plot = funcy_plot, path = "figures/annotated/data_by_location")
}
## separate out the top 15 most common functions as well as the number of annotated reads in each sample
## the total number of annotated reads should be the most common "function" in each sample so we take the top 16 most common functions instead of the 15 most common
top.df = func.sum[c(1:17),]
top.df$place = "top_15"
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(region), y = as.numeric(relative_abundance)))+
geom_boxplot(outliers=FALSE)+
ggtitle(paste("Overall frequency of", f, sep = " "))+
labs(y="Frequency", x="Region")
ggsave(paste0(f,"_by_region",  ".png"), plot = funcy_plot, path = "figures/overall")
}
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(site), y = as.numeric(relative_abundance)))+
geom_point()+
facet_grid(.~region, scales="free", space="free")+
ggtitle(paste("Overall frequency of", f, sep = " "))+
labs(y="Frequency", x="Location")
ggsave(paste0(f,"_by_location",  ".png"), plot = funcy_plot, path = "figures/overall/data_by_location")
}
func_table.long$relative_annotated_abundance = func_table.long$function_abundance/func_table.long$annotated_asvs2
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(region), y = as.numeric(relative_annotated_abundance)))+
geom_boxplot(outliers=FALSE)+
ggtitle(paste("Frequency of", f, "amongst annotated taxa", sep = " "))+
labs(y="Frequency", x="Region")
ggsave(paste0(f,"_by_region",  ".png"), plot = funcy_plot, path = "figures/annotated")
}
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(site), y = as.numeric(relative_annotated_abundance)))+
geom_point()+
facet_grid(.~region, scales="free", space="free")+
labs(y="Frequency", x="Location")+
ggtitle(paste("Frequency of", f, "amongst annotated taxa", sep = " "))
ggsave(paste0(f,"_by_location",  ".png"), plot = funcy_plot, path = "figures/annotated/data_by_location")
}
overlaps = read.table("kelpme_overlaps.txt", sep = "\t", row.names = 1, header = TRUE)
## first look at the overlap between dark sulfite and dark sulfur oxidation
print(overlaps["dark_sulfite_oxidation","dark_sulfur_oxidation"])
## next look at the overlap between photosynthetic cyanobacteria and oxygenic photoautotrophy
print(overlaps["photosynthetic_cyanobacteria","oxygenic_photoautotrophy"])
lemay2018 <- readRDS("lemay2018_unfiltered_phyloseq.RDS")
newMeta = separate(as.data.frame(as.matrix(lemay2018@sam_data)),
col="sample_id",
into=c("kelp_location", "number"),
sep="-")
newMeta$location = str_sub(newMeta$kelp_location, -2,-1)
newMeta$kelp= str_sub(newMeta$kelp_location, 1,-3)
lemay2018 = phyloseq(sample_data(newMeta),
otu_table(lemay2018@otu_table, taxa_are_rows = FALSE),
tax_table(lemay2018@tax_table))
## add a field to further specificy where the data was collected
lemay2018@sam_data$region = "BC"
## import king data
king2022 <- readRDS("king2022_unfiltered_phyloseq-2.RDS")
## add a variable to further specify where the data was collected
king2022@sam_data$region = "UK"
## merge with lemay data
kelp_me = merge_phyloseq(lemay2018, king2022)
kelp_me <- subset_taxa(kelp_me,
domain != "Unassigned" &
domain != "Eukaryota" &
order != "Chloroplast"&
order != "Mitochondria")
#Add unifiltered sample read numbers in
kelp_me@sam_data$sample_sums_unfiltered <- as.numeric(sample_sums(kelp_me))
#sort(as.numeric(sample_sums(kelp_me))) : Most samples > 1000,
kelp_me_high <- prune_samples(sample_sums(kelp_me) >= 1000, kelp_me)
#extracting OTUs and filtering low frequency ASV's
otutab <- as.data.frame((t(as.matrix(otu_table(kelp_me_high@otu_table)))))
otutab$asv_abundance <- rowSums(otutab)
#removing ASV's that occur fewer than 100 times in the dataset
otu.pruned <- subset(otutab, otutab$asv_abundance>100)
widthotu = ncol(otu.pruned)
otu.pruned <- otu.pruned[,-c(widthotu)]
#removing low freq samples
ASVoccur = function(x){return(sum(x>0))}
otu.pruned$asv_occur_count = apply(otu.pruned,1, ASVoccur)
otu.highfreq = subset(otu.pruned, otu.pruned$asv_occur_count > 2)
otu.highfreq = otu.highfreq[,-c(widthotu)]
## remove reads that are the result of sequencing errors
otu.clean <- mutate_all(otu.highfreq, funs(ifelse(. <5, 0, .)))
kelp_me_clean = phyloseq(sample_data(kelp_me_high),
tax_table(kelp_me_high),
otu_table(as.matrix(otu.clean), taxa_are_rows = TRUE))
kelp_me_clean@sam_data$sample_sums_filtered <- sample_sums(kelp_me_clean)
write_rds(kelp_me_clean, "kelp_me_clean.RDS")
## import functional annotation of lemay dataset
file_name = "kelpme_func.txt"
func_table = read.table(file_name, sep = "\t", row.names = 1)
## import sample names and append them to the table of functional annotations
func_header = scan(file_name, nlines = 2, what = character())[-c(1:7)]
names(func_table) = func_header
func_table = as.data.frame(t(func_table))
metacols = ncol(func_table)
## use our counts of unannotated asv reads to find the number of annotated asv reads
func_table$annotated_asvs = kelp_me_clean@sam_data$sample_sums_filtered - func_table$unannotated_asvs
## Combine the metadata from the original phyloseq file with the new functional annotation data
kelp_me_meta = as.data.frame(kelp_me_clean@sam_data)
func_table = cbind(func_table, kelp_me_meta)
func_table = subset(func_table, kelp == "Laminaria" | Species == "Laminaria hyperborea" | kelp == "Saccharina"| Species == "Saccharina latissima")
## combine the site names from the different datasets into a single column
func_table = unite(func_table, site, c(Site_name, location))
## before lengthening the table copy the number of annotated asvs to another column
func_table$annotated_asvs2 = func_table$annotated_asvs
## pivot longer to assign the occurence of each function to the sample it was measured in
func_table.long = func_table %>% pivot_longer(cols = c(1:metacols), names_to = "eco_function", values_to="function_abundance")
## calculate the relative abundance of each function in each sample
func_table.long$relative_abundance = func_table.long$function_abundance/func_table.long$sample_sums_filtered
## next summarise the data by function
func.sum = ddply(func_table.long, c("eco_function"), summarise, sum = sum(relative_abundance))
## sort the data by relative abundance
func.sum= func.sum[order(-func.sum$sum),]
## separate out the top 15 most common functions as well as the number of annotated reads in each sample
## the total number of annotated reads should be the most common "function" in each sample so we take the top 16 most common functions instead of the 15 most common
top.df = func.sum[c(1:17),]
top.df$place = "top_15"
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(region), y = as.numeric(relative_abundance)))+
geom_boxplot(outliers=FALSE)+
ggtitle(paste("Overall frequency of", f, sep = " "))+
labs(y="Frequency", x="Region")
ggsave(paste0(f,"_by_region",  ".png"), plot = funcy_plot, path = "figures/overall")
}
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(site), y = as.numeric(relative_abundance)))+
geom_point()+
facet_grid(.~region, scales="free", space="free")+
ggtitle(paste("Overall frequency of", f, sep = " "))+
labs(y="Frequency", x="Location")
ggsave(paste0(f,"_by_location",  ".png"), plot = funcy_plot, path = "figures/overall/data_by_location")
}
func_table.long$relative_annotated_abundance = func_table.long$function_abundance/func_table.long$annotated_asvs2
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(region), y = as.numeric(relative_annotated_abundance)))+
geom_boxplot(outliers=FALSE)+
ggtitle(paste("Frequency of", f, "amongst annotated taxa", sep = " "))+
labs(y="Frequency", x="Region")
ggsave(paste0(f,"_by_region",  ".png"), plot = funcy_plot, path = "figures/annotated")
}
for (f in top.df$eco_function){
funcdata = subset(func_table.long, eco_function == f)
funcy_plot = ggplot(funcdata, aes(x=as.character(site), y = as.numeric(relative_annotated_abundance)))+
geom_point()+
facet_grid(.~region, scales="free", space="free")+
labs(y="Frequency", x="Location")+
ggtitle(paste("Frequency of", f, "amongst annotated taxa", sep = " "))
ggsave(paste0(f,"_by_location",  ".png"), plot = funcy_plot, path = "figures/annotated/data_by_location")
}
