legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggsave("Taxa assigned trait oxygenic photoautotrophy.png", plot = o_pau.plot, path = "figures/taxaplots", width = 20, height = 10)
## predatory or exoparasitic
poe.plot = ggplot(poe.df, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggsave("Taxa assigned trait predatory or exoparasitic.png", plot = poe.plot, path = "figures/taxaplots", width = 20, height = 10)
View(poe.df)
ann_tab = read.table("kelpme_groups2records.txt", sep = "\t", row.names = 1, header = TRUE)
### Assemble phyloseqs by function ###
## aerobic chemoheterotrophy
a_chem = subset_taxa(kelp_me_clean, ann_tab$aerobic_chemoheterotrophy>0)
Import clean data, if necessary
## start by loading necessary packages
library(phyloseq)
library(tidyverse)
library(vegan)
library(plyr)
library(qualpalr)
library(ggpubr)
library(dplyr)
library(data.table)
library(biomformat)
library(readr)
library(rstatix)
kelp_me_clean <- readRDS('kelp_me_clean.RDS')
## remove samples with no specified region
kelp_me_clean = subset_samples(kelp_me_clean, is.na(Region) == FALSE)
## rename region for later processing
names(kelp_me_clean@sam_data)[3] = "Location"
## add a new region field (either BC or UK)
assign_reg = function(x){ifelse(nchar(x)<3, "BC", "UK")}
kelp_me_clean@sam_data$Region = assign_reg(kelp_me_clean@sam_data$Location)
ann_tab = read.table("kelpme_groups2records.txt", sep = "\t", row.names = 1, header = TRUE)
### Assemble phyloseqs by function ###
## aerobic chemoheterotrophy
a_chem = subset_taxa(kelp_me_clean, ann_tab$aerobic_chemoheterotrophy>0)
## dark sulfur oxidation
ds_ox = subset_taxa(kelp_me_clean, ann_tab$dark_sulfur_oxidation>0)
## must exclude data collected on Laminaria in BC as these were not significanty different from 0
ds_ox = subset_samples(ds_ox, genus == "Saccharina" | Region == "UK")
## fermentation
ferm = subset_taxa(kelp_me_clean, ann_tab$fermentation>0)
## must exclude data collected on Laminaria as these were not significanty different from 0
ferm = subset_samples(ferm, genus != "Laminaria")
## oxygenic photoautotrophy
o_pau = subset_taxa(kelp_me_clean, ann_tab$oxygenic_photoautotrophy>0)
## must exclude data collected in BC as these were not significanty different from 0
o_pau = subset_samples(o_pau, Region != "BC")
## predatory or exoparasitic
poe = subset_taxa(kelp_me_clean, ann_tab$predatory_or_exoparasitic>0)
## load function
dephyloseq = function(phylo_obj){
## get the metadata
meta = as.data.frame(as.matrix(phylo_obj@sam_data))
## how many metadata columns you have
metacols = ncol(meta)+1
## get out the otu table
## if your metadta is empty after running this, you need to use
otu = as.data.frame(t(as.matrix(phylo_obj@otu_table)))
#otu = as.data.frame(as.matrix(phylo_obj@otu_table))
## merge the metadata and otu table by the rownames (sample ids from the Illumina sequencing   data)
mo = merge(meta, otu, by=0)
## get out the taxonomy file
tax = as.data.frame(phylo_obj@tax_table)
## get the ASV ID out. This the matches the placeholder ASV ID in the OTU table
tax = tax %>% rownames_to_column(var="asv_id2")
## pivot longer to be able to match the ASVs in the OTU table to the taxonomy table
mo = mo %>% pivot_longer(cols = -c(1:metacols), names_to = "asv_id2", values_to="asv_abundance")
## Join the metadata and otu table with the taoxnomy table
mot = full_join(mo, tax)
## Specify the output for the dephyloseq funciton
output = mot
}
a_chem = tax_glom(a_chem, taxrank = "species")
## calculate the number of reads in each sample. This is important for relative abundance calculations later
a_chem@sam_data$read_depth = sample_sums(a_chem)
## rename "genus" and "species" to specify that they refer to the kelp
names(a_chem@sam_data)[4] = "genus_kelp"
names(a_chem@sam_data)[5] = "species_kelp"
## remove samples where the function was not annotated
a_chem = subset_samples(a_chem, read_depth>0)
## remove samples taken from kelp other than Laminaria and Saccharina
a_chem = subset_samples(a_chem, genus_kelp == "Laminaria" | genus_kelp == "Saccharina")
## transform the phyloseq object into a data table, assigning the occurence of each OTU to the sample it was measured in
a_chem.df = dephyloseq(a_chem)
## add the relative abundance of each taxa to our dataframe
a_chem.df$relative_abundance = as.numeric(a_chem.df$asv_abundance)/as.numeric(a_chem.df$read_depth)
## now add the names for each taxa and comparison group in our plots
a_chem.df$plot_names = paste0(a_chem.df$genus, ";", a_chem.df$species)
a_chem.df$comparison_names = paste0(a_chem.df$genus_kelp, ";", a_chem.df$Region)
ds_ox = tax_glom(ds_ox, taxrank = "species")
## calculate the number of reads in each sample. This is important for relative abundance calculations later
ds_ox@sam_data$read_depth = sample_sums(ds_ox)
## rename "genus" and "species" to specify that they refer to the kelp
names(ds_ox@sam_data)[4] = "genus_kelp"
names(ds_ox@sam_data)[5] = "species_kelp"
## remove samples where the function was not annotated
ds_ox = subset_samples(ds_ox, read_depth>0)
## remove samples taken from kelp other than Laminaria and Saccharina
ds_ox = subset_samples(ds_ox, genus_kelp == "Laminaria" | genus_kelp == "Saccharina")
## transform the phyloseq object into a data table, assigning the occurence of each OTU to the sample it was measured in
ds_ox.df = dephyloseq(ds_ox)
## add the relative abundance of each taxa to our dataframe
ds_ox.df$relative_abundance = as.numeric(ds_ox.df$asv_abundance)/as.numeric(ds_ox.df$read_depth)
## now add the names for each taxa and comparison group in our plots
ds_ox.df$plot_names = paste0(ds_ox.df$genus, ";", ds_ox.df$species)
ds_ox.df$comparison_names = paste0(ds_ox.df$genus_kelp, ";", ds_ox.df$Region)
ferm = tax_glom(ferm, taxrank = "species")
## calculate the number of reads in each sample. This is important for relative abundance calculations later
ferm@sam_data$read_depth = sample_sums(ferm)
## rename "genus" and "species" to specify that they refer to the kelp
names(ferm@sam_data)[4] = "genus_kelp"
names(ferm@sam_data)[5] = "species_kelp"
## remove samples where the function was not annotated
ferm = subset_samples(ferm, read_depth>0)
## remove samples taken from kelp other than Laminaria and Saccharina
ferm = subset_samples(ferm, genus_kelp == "Laminaria" | genus_kelp == "Saccharina")
## transform the phyloseq object into a data table, assigning the occurence of each OTU to the sample it was measured in
ferm.df = dephyloseq(ferm)
## add the relative abundance of each taxa to our dataframe
ferm.df$relative_abundance = as.numeric(ferm.df$asv_abundance)/as.numeric(ferm.df$read_depth)
## now add the names for each taxa and comparison group in our plots
ferm.df$plot_names = paste0(ferm.df$genus, ";", ferm.df$species)
ferm.df$comparison_names = paste0(ferm.df$genus_kelp, ";", ferm.df$Region)
o_pau = tax_glom(o_pau, taxrank = "species")
## calculate the number of reads in each sample. This is important for relative abundance calculations later
o_pau@sam_data$read_depth = sample_sums(o_pau)
## rename "genus" and "species" to specify that they refer to the kelp
names(o_pau@sam_data)[4] = "genus_kelp"
names(o_pau@sam_data)[5] = "species_kelp"
## remove samples where the function was not annotated
o_pau = subset_samples(o_pau, read_depth>0)
## remove samples taken from kelp other than Laminaria and Saccharina
o_pau = subset_samples(o_pau, genus_kelp == "Laminaria" | genus_kelp == "Saccharina")
## transform the phyloseq object into a data table, assigning the occurence of each OTU to the sample it was measured in
o_pau.df = dephyloseq(o_pau)
## add the relative abundance of each taxa to our dataframe
o_pau.df$relative_abundance = as.numeric(o_pau.df$asv_abundance)/as.numeric(o_pau.df$read_depth)
## now add the names for each taxa and comparison group in our plots
o_pau.df$plot_names = paste0(o_pau.df$genus, ";", o_pau.df$species)
o_pau.df$comparison_names = paste0(o_pau.df$genus_kelp, ";", o_pau.df$Region)
poe = tax_glom(poe, taxrank = "species")
## calculate the number of reads in each sample. This is important for relative abundance calculations later
poe@sam_data$read_depth = sample_sums(poe)
## rename "genus" and "species" to specify that they refer to the kelp
names(poe@sam_data)[4] = "genus_kelp"
names(poe@sam_data)[5] = "species_kelp"
## remove samples where the function was not annotated
poe = subset_samples(poe, read_depth>0)
## remove samples taken from kelp other than Laminaria and Saccharina
poe = subset_samples(poe, genus_kelp == "Laminaria" | genus_kelp == "Saccharina")
## transform the phyloseq object into a data table, assigning the occurence of each OTU to the sample it was measured in
poe.df = dephyloseq(poe)
## add the relative abundance of each taxa to our dataframe
poe.df$relative_abundance = as.numeric(poe.df$asv_abundance)/as.numeric(poe.df$read_depth)
## now add the names for each taxa and comparison group in our plots
poe.df$plot_names = paste0(poe.df$genus, ";", poe.df$species)
poe.df$comparison_names = paste0(poe.df$genus_kelp, ";", poe.df$Region)
## aerobic chemoheterotrophy
print(length(unique(a_chem.df$plot_names)))
print(head(unique(a_chem.df$plot_names)))
## dark sulfur oxidation
print(length(unique(ds_ox.df$plot_names)))
print(head(unique(ds_ox.df$plot_names)))
## fermentation
print(length(unique(ferm.df$plot_names)))
print(head(unique(ferm.df$plot_names)))
## oxygenic photoautotrophy
print(length(unique(o_pau.df$plot_names)))
print(head(unique(o_pau.df$plot_names)))
## predatory or exoparasitic
print(length(unique(poe.df$plot_names)))
print(head(unique(poe.df$plot_names)))
### aerobic chemoheterotrophy ###
## summarize the data
a_chem.sum = ddply(a_chem.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
a_chem.sorted = a_chem.sum[order(-a_chem.sum$sum),]
# take the top 15 genera
a_chem.top = a_chem.sorted[c(1:15),]
a_chem.top$place = "top_15"
## recombine with the rest of our data
a_chem.all = full_join(a_chem.df, a_chem.top)
## make the empty "place" cells say bottom. This works because we used full_join
a_chem.all$place = replace(a_chem.all$place, is.na(a_chem.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
a_chem.all[a_chem.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
a_chem.all = a_chem.all[order(-a_chem.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(a_chem.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
a_chem.all$plot_names = factor(a_chem.all$plot_names, levels=c(plot.order))
### fermentation ###
## summarize the data
ferm.sum = ddply(ferm.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
ferm.sorted = ferm.sum[order(-ferm.sum$sum),]
# take the top 5 genera
ferm.top = ferm.sorted[c(1:10),]
ferm.top$place = "top_10"
## recombine with the rest of our data
ferm.all = full_join(ferm.df, ferm.top)
## make the empty "place" cells say bottom. This works because we used full_join
ferm.all$place = replace(ferm.all$place, is.na(ferm.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
ferm.all[ferm.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
ferm.all = ferm.all[order(-ferm.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(ferm.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
ferm.all$plot_names = factor(ferm.all$plot_names, levels=c(plot.order))
### oxygenic photoautotrophy ###
## summarize the data
o_pau.sum = ddply(o_pau.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
o_pau.sorted = o_pau.sum[order(-o_pau.sum$sum),]
# take the top 5 genera
o_pau.top = o_pau.sorted[c(1:10),]
o_pau.top$place = "top_10"
## recombine with the rest of our data
o_pau.all = full_join(o_pau.df, o_pau.top)
## make the empty "place" cells say bottom. This works because we used full_join
o_pau.all$place = replace(o_pau.all$place, is.na(o_pau.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
o_pau.all[o_pau.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
o_pau.all = o_pau.all[order(-o_pau.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(o_pau.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
o_pau.all$plot_names = factor(o_pau.all$plot_names, levels=c(plot.order))
### predaorty or exoparaisitic ###
## summarize the data
poe.sum = ddply(poe.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
poe.sorted = poe.sum[order(-poe.sum$sum),]
## order by decreasing relative abundance
poe.df = poe.df[order(-poe.df$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(poe.df$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
poe.df$plot_names = factor(poe.df$plot_names, levels=c(plot.order))
### dark sulfur oxidation ###
## summarize the data
ds_ox.sum = ddply(ds_ox.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
ds_ox.sorted = ds_ox.sum[order(-ds_ox.sum$sum),]
## order by decreasing relative abundance
ds_ox.df = ds_ox.df[order(-ds_ox.df$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(ds_ox.df$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
ds_ox.df$plot_names = factor(ds_ox.df$plot_names, levels=c(plot.order))
View(poe.df)
## aerobic chemoheterotrophy
a_chem.plot = ggplot(a_chem.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggsave("Taxa assigned trait aerobic chemoheterotrophy.png", plot = a_chem.plot, path = "figures/taxaplots", width = 20, height = 10)
## fermentation
ferm.plot = ggplot(ferm.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggsave("Taxa assigned trait fermentation.png", plot = ferm.plot, path = "figures/taxaplots", width = 20, height = 10)
## oxygenic photoautotrophy
o_pau.plot = ggplot(o_pau.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggsave("Taxa assigned trait oxygenic photoautotrophy.png", plot = o_pau.plot, path = "figures/taxaplots", width = 20, height = 10)
## predatory or exoparasitic
poe.plot = ggplot(poe.df, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggsave("Taxa assigned trait predatory or exoparasitic.png", plot = poe.plot, path = "figures/taxaplots", width = 20, height = 10)
## dark sulfur oxidation
ds_ox.plot = ggplot(ds_ox.df, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggsave("Taxa assigned trait dark sulfur oxidation.png", plot = ds_ox.plot, path = "figures/taxaplots", width = 20, height = 10)
## aerobic chemoheterotrophy
a_chem.plot = ggplot(a_chem.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")+
ggtitle("Taxa assigned trait aerobic chemoheterotrophy")
ggsave("Taxa assigned trait aerobic chemoheterotrophy.png", plot = a_chem.plot, path = "figures/taxaplots", width = 20, height = 10)
## fermentation
ferm.plot = ggplot(ferm.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")+
ggtitle("Taxa assigned trait fermentation")
ggsave("Taxa assigned trait fermentation.png", plot = ferm.plot, path = "figures/taxaplots", width = 20, height = 10)
## oxygenic photoautotrophy
o_pau.plot = ggplot(o_pau.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")+
ggtitle("Taxa assigned trait oxygenic photoautotrophy")
ggsave("Taxa assigned trait oxygenic photoautotrophy.png", plot = o_pau.plot, path = "figures/taxaplots", width = 20, height = 10)
## predatory or exoparasitic
poe.plot = ggplot(poe.df, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")+
ggtitle("Taxa assigned trait predatory or exoparasitic")
ggsave("Taxa assigned trait predatory or exoparasitic.png", plot = poe.plot, path = "figures/taxaplots", width = 20, height = 10)
## dark sulfur oxidation
ds_ox.plot = ggplot(ds_ox.df, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")+
ggtitle("Taxa assigned trait dark sulfur oxidation")
ggsave("Taxa assigned trait dark sulfur oxidation.png", plot = ds_ox.plot, path = "figures/taxaplots", width = 20, height = 10)
## first create the comparison groups
func_table.long$comparison_groups = paste0(func_table.long$genus, ";", func_table.long$Region)
## import functional annotation of lemay dataset
file_name = "kelpme_func.txt"
func_table = read.table(file_name, sep = "\t", row.names = 1)
## import sample names and append them to the table of functional annotations
func_header = scan(file_name, nlines = 2, what = character())[-c(1:7)]
names(func_table) = func_header
func_table = as.data.frame(t(func_table))
## use our counts of unannotated asv reads to find the number of annotated asv reads
func_table$annotated_asvs = kelp_me_clean@sam_data$sample_sums_filtered - func_table$unannotated_asvs
# save the number of columns in our table
metacols = ncol(func_table)
## Combine the metadata from the original phyloseq file with the new functional annotation data
kelp_me_meta = as.data.frame(kelp_me_clean@sam_data)
func_table = cbind(func_table, kelp_me_meta)
func_table = subset(func_table, genus == "Laminaria" | genus == "Saccharina")
## before lengthening the table copy the number of annotated asvs to another column
func_table$annotated_asvs2 = func_table$annotated_asvs
## pivot longer to assign the occurence of each function to the sample it was measured in
func_table.long = func_table %>% pivot_longer(cols = c(1:metacols), names_to = "eco_function", values_to="function_abundance")
## calculate the relative abundance of each function in each sample
func_table.long$relative_abundance = func_table.long$function_abundance/func_table.long$sample_sums_filtered
## next summarise the data by function
func.sum = ddply(func_table.long, c("eco_function"), summarise, sum = sum(relative_abundance))
## sort the data by relative abundance
func.sum= func.sum[order(-func.sum$sum),]
## separate out the top 15 most common functions as well as the number of annotated reads in each sample
## the total number of annotated reads should be the most common "function" in each sample so we take the top 16 most common functions instead of the 15 most common
top.df = func.sum[c(1:17),]
top.df$place = "top_15"
View(poe.df)
## first create the comparison groups
func_table.long$comparison_groups = paste0(func_table.long$genus, ";", func_table.long$Region)
## initialize the data frame we will store our significance tests in
sig_vals = data.frame(matrix(ncol=6,nrow=0))
names(sig_vals) = c("Kelp; Region", "eco_function", "p", "p.signif", "p.adj", "p.adj.signif")
## create a list of the functions we are interested in
main.funcs = list("aerobic_chemoheterotrophy", "dark_sulfur_oxidation", "oxygenic_photoautotrophy", "fermentation", "predatory_or_exoparasitic")
## check if the mean frequency of these functions in each group is significantly different from 0
for(f in main.funcs){
funcdata = subset(func_table.long, eco_function == f)
sig.test = funcdata %>%
group_by(comparison_groups) %>%
t_test(relative_abundance ~ 0) %>%
add_significance() %>%
adjust_pvalue() %>%
add_significance()
sig.test = subset(sig.test, select = c("comparison_groups", "p", "p.signif", "p.adj", "p.adj.signif"))
sig.test$eco_function = f
sig_vals = rbind(sig_vals, sig.test)
}
write.table(sig.vals,"kelpme_mainfuncs.txt", quote = FALSE, sep ="\t")
write.table(sig_vals,"kelpme_mainfuncs.txt", quote = FALSE, sep ="\t")
write.table(sig_vals,"kelpme_mainfuncs.txt", quote = FALSE)
write.table(sig_vals,"kelpme_mainfuncs.txt", quote = FALSE, sep = ",")
source("~/GitHub/Bio503-project/sam_analysis_FINAL.R", echo=TRUE)
