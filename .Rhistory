a_chem.top = a_chem.sorted[c(1:15),]
a_chem.top$place = "top_15"
## recombine with the rest of our data
a_chem.all = full_join(a_chem.df, a_chem.top)
## make the empty "place" cells say bottom. This works because we used full_join
a_chem.all$place = replace(a_chem.all$place, is.na(a_chem.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
a_chem.all[a_chem.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
a_chem.all = a_chem.all[order(-a_chem.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(a_chem.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
a_chem.all$plot_names = factor(a_chem.all$plot_names, levels=c(plot.order))
### fermentation ###
## summarize the data
ferm.sum = ddply(ferm.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
ferm.sorted = ferm.sum[order(-ferm.sum$sum),]
# take the top 5 genera
ferm.top = ferm.sorted[c(1:5),]
ferm.top$place = "top_5"
## recombine with the rest of our data
ferm.all = full_join(ferm.df, ferm.top)
## make the empty "place" cells say bottom. This works because we used full_join
ferm.all$place = replace(ferm.all$place, is.na(ferm.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
ferm.all[ferm.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
ferm.all = ferm.all[order(-ferm.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(ferm.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
ferm.all$plot_names = factor(ferm.all$plot_names, levels=c(plot.order))
### oxygenic photoautotrophy ###
## summarize the data
o_pau.sum = ddply(o_pau.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
o_pau.sorted = o_pau.sum[order(-o_pau.sum$sum),]
# take the top 5 genera
o_pau.top = o_pau.sorted[c(1:5),]
o_pau.top$place = "top_5"
## recombine with the rest of our data
o_pau.all = full_join(o_pau.df, o_pau.top)
## make the empty "place" cells say bottom. This works because we used full_join
o_pau.all$place = replace(o_pau.all$place, is.na(o_pau.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
o_pau.all[o_pau.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
o_pau.all = o_pau.all[order(-o_pau.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(o_pau.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
o_pau.all$plot_names = factor(o_pau.all$plot_names, levels=c(plot.order))
ggplot(a_chem.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(ferm.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(o_pau.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
### aerobic chemoheterotrophy ###
## summarize the data
a_chem.sum = ddply(a_chem.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
a_chem.sorted = a_chem.sum[order(-a_chem.sum$sum),]
# take the top 15 genera
a_chem.top = a_chem.sorted[c(1:15),]
a_chem.top$place = "top_15"
## recombine with the rest of our data
a_chem.all = full_join(a_chem.df, a_chem.top)
## make the empty "place" cells say bottom. This works because we used full_join
a_chem.all$place = replace(a_chem.all$place, is.na(a_chem.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
a_chem.all[a_chem.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
a_chem.all = a_chem.all[order(-a_chem.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(a_chem.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
a_chem.all$plot_names = factor(a_chem.all$plot_names, levels=c(plot.order))
### fermentation ###
## summarize the data
ferm.sum = ddply(ferm.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
ferm.sorted = ferm.sum[order(-ferm.sum$sum),]
# take the top 5 genera
ferm.top = ferm.sorted[c(1:10),]
ferm.top$place = "top_10"
## recombine with the rest of our data
ferm.all = full_join(ferm.df, ferm.top)
## make the empty "place" cells say bottom. This works because we used full_join
ferm.all$place = replace(ferm.all$place, is.na(ferm.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
ferm.all[ferm.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
ferm.all = ferm.all[order(-ferm.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(ferm.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
ferm.all$plot_names = factor(ferm.all$plot_names, levels=c(plot.order))
### oxygenic photoautotrophy ###
## summarize the data
o_pau.sum = ddply(o_pau.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
o_pau.sorted = o_pau.sum[order(-o_pau.sum$sum),]
# take the top 5 genera
o_pau.top = o_pau.sorted[c(1:10),]
o_pau.top$place = "top_10"
## recombine with the rest of our data
o_pau.all = full_join(o_pau.df, o_pau.top)
## make the empty "place" cells say bottom. This works because we used full_join
o_pau.all$place = replace(o_pau.all$place, is.na(o_pau.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
o_pau.all[o_pau.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
o_pau.all = o_pau.all[order(-o_pau.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(o_pau.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
o_pau.all$plot_names = factor(o_pau.all$plot_names, levels=c(plot.order))
ggplot(a_chem.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(ferm.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(o_pau.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
### aerobic chemoheterotrophy ###
## summarize the data
a_chem.sum = ddply(a_chem.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
a_chem.sorted = a_chem.sum[order(-a_chem.sum$sum),]
# take the top 15 genera
a_chem.top = a_chem.sorted[c(1:15),]
a_chem.top$place = "top_15"
## recombine with the rest of our data
a_chem.all = full_join(a_chem.df, a_chem.top)
## make the empty "place" cells say bottom. This works because we used full_join
a_chem.all$place = replace(a_chem.all$place, is.na(a_chem.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
a_chem.all[a_chem.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
a_chem.all = a_chem.all[order(-a_chem.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(a_chem.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
a_chem.all$plot_names = factor(a_chem.all$plot_names, levels=c(plot.order))
### fermentation ###
## summarize the data
ferm.sum = ddply(ferm.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
ferm.sorted = ferm.sum[order(-ferm.sum$sum),]
# take the top 5 genera
ferm.top = ferm.sorted[c(1:10),]
ferm.top$place = "top_10"
## recombine with the rest of our data
ferm.all = full_join(ferm.df, ferm.top)
## make the empty "place" cells say bottom. This works because we used full_join
ferm.all$place = replace(ferm.all$place, is.na(ferm.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
ferm.all[ferm.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
ferm.all = ferm.all[order(-ferm.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(ferm.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
ferm.all$plot_names = factor(ferm.all$plot_names, levels=c(plot.order))
### oxygenic photoautotrophy ###
## summarize the data
o_pau.sum = ddply(o_pau.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
o_pau.sorted = o_pau.sum[order(-o_pau.sum$sum),]
# take the top 5 genera
o_pau.top = o_pau.sorted[c(1:10),]
o_pau.top$place = "top_10"
## recombine with the rest of our data
o_pau.all = full_join(o_pau.df, o_pau.top)
## make the empty "place" cells say bottom. This works because we used full_join
o_pau.all$place = replace(o_pau.all$place, is.na(o_pau.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
o_pau.all[o_pau.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
o_pau.all = o_pau.all[order(-o_pau.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(o_pau.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
o_pau.all$plot_names = factor(o_pau.all$plot_names, levels=c(plot.order))
### predaorty or exoparaisitic ###
## summarize the data
poe.sum = ddply(poe.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
poe.sorted = poe.sum[order(-poe.sum$sum),]
## order by decreasing relative abundance
poe.all = poe.all[order(-poe.all$relative_abundance),]
### aerobic chemoheterotrophy ###
## summarize the data
a_chem.sum = ddply(a_chem.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
a_chem.sorted = a_chem.sum[order(-a_chem.sum$sum),]
# take the top 15 genera
a_chem.top = a_chem.sorted[c(1:15),]
a_chem.top$place = "top_15"
## recombine with the rest of our data
a_chem.all = full_join(a_chem.df, a_chem.top)
## make the empty "place" cells say bottom. This works because we used full_join
a_chem.all$place = replace(a_chem.all$place, is.na(a_chem.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
a_chem.all[a_chem.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
a_chem.all = a_chem.all[order(-a_chem.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(a_chem.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
a_chem.all$plot_names = factor(a_chem.all$plot_names, levels=c(plot.order))
### fermentation ###
## summarize the data
ferm.sum = ddply(ferm.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
ferm.sorted = ferm.sum[order(-ferm.sum$sum),]
# take the top 5 genera
ferm.top = ferm.sorted[c(1:10),]
ferm.top$place = "top_10"
## recombine with the rest of our data
ferm.all = full_join(ferm.df, ferm.top)
## make the empty "place" cells say bottom. This works because we used full_join
ferm.all$place = replace(ferm.all$place, is.na(ferm.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
ferm.all[ferm.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
ferm.all = ferm.all[order(-ferm.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(ferm.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
ferm.all$plot_names = factor(ferm.all$plot_names, levels=c(plot.order))
### oxygenic photoautotrophy ###
## summarize the data
o_pau.sum = ddply(o_pau.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
o_pau.sorted = o_pau.sum[order(-o_pau.sum$sum),]
# take the top 5 genera
o_pau.top = o_pau.sorted[c(1:10),]
o_pau.top$place = "top_10"
## recombine with the rest of our data
o_pau.all = full_join(o_pau.df, o_pau.top)
## make the empty "place" cells say bottom. This works because we used full_join
o_pau.all$place = replace(o_pau.all$place, is.na(o_pau.all$place), "bottom")
## replace plot_names that have bottom taxa as their "place" with Other
o_pau.all[o_pau.all$place == "bottom",]$plot_names = "Others"
## order by decreasing relative abundance
o_pau.all = o_pau.all[order(-o_pau.all$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(o_pau.all$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
o_pau.all$plot_names = factor(o_pau.all$plot_names, levels=c(plot.order))
### predaorty or exoparaisitic ###
## summarize the data
poe.sum = ddply(poe.df, c("plot_names"), summarise, sum = sum(relative_abundance))
## sort by relative abundance
poe.sorted = poe.sum[order(-poe.sum$sum),]
## order by decreasing relative abundance
poe.df = poe.df[order(-poe.df$relative_abundance),]
## get list of factors in order
natural.genus.order = as.list(c(unique(poe.df$plot_names)))
## remove others from list #!#
no.others=natural.genus.order[!natural.genus.order == 'Others']
## add Others to end of list
plot.order = append(no.others, "Others")
## set plot_names levels
plot.order = unlist(plot.order)
## order dataframe by relative abundance
poe.df$plot_names = factor(poe.df$plot_names, levels=c(plot.order))
ggplot(a_chem.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(ferm.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(o_pau.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(poe.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(a_chem.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(ferm.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(o_pau.all, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
ggplot(poe.df, aes(x=as.character(Row.names), y=as.numeric(relative_abundance), fill=as.factor(plot_names)))+
geom_bar(stat = "identity")+
guides(fill=guide_legend(ncol=2))+
facet_grid(.~comparison_names, scales="free", space="free")+
theme_bw()+
theme(panel.grid = element_blank(),strip.background = element_rect(fill="white"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.title = element_text(size=10,face="bold"),
strip.text = element_text(color="black", size=10),
legend.text=element_text(size=6),
axis.line = element_line(colour = "black"),
axis.text.x = element_blank())+
labs(y="Relative Abundance", x="Sample", fill="Taxa")
